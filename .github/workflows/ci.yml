name: Python application for Automation Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  REGION: eu-north-1
  TAG_TEST: qa-tests-${{ github.sha }}
  TAG_SEL_HUB: selenium-grid-hub-${{ github.sha }}
  TAG_CHROME_NODE: chrome-node-${{ github.sha }}
  REPO: 727646471145.dkr.ecr.eu-north-1.amazonaws.com/hteymur/qa-automation
  CLUSTER_NAME: QaAutomationEKS 
  HELM_CHART_DIR: helm/selenium-grid 

jobs:
  verify-app:
    name: Verify Application
    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Use the Python version required by your project

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          pip install --no-cache-dir -r ApplicationTests/requirements.txt

      # Run pylint linting
      - name: Run pylint linting
        run: |
          pylint --fail-under=8 ApplicationTests/main.py

  # This job depends on the verify-app job
  build-publish:
    runs-on: ubuntu-latest
    name: Build&dPush&Docker
    needs: verify-app 

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Build docker images
      - name: Build docker images
        run: |
          docker build -t $REPO:$TAG_TEST -f DockerFiles/DockerfileTest .
          docker build -t $REPO:$TAG_SEL_HUB -f DockerFiles/DockerfileSelHub .
          docker build -t $REPO:$TAG_CHROME_NODE -f DockerFiles/DockerfileChromeNode .

      # Get AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      # Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
 
      # Publish docker images
      - name: Publish docker images
        run: |
          docker push $REPO:$TAG_TEST
          docker push $REPO:$TAG_SEL_HUB
          docker push $REPO:$TAG_CHROME_NODE

  # Verify Helm chart and install on EKS
  deploy-helm:
    runs-on: ubuntu-latest
    name: Verify and Deploy Helm Chart
    needs: build-publish 

    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client

      # Install Helm
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          helm version

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      # Update kubeconfig for EKS
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.REGION }} --name ${{ env.CLUSTER_NAME }}

      # Verify Helm chart
      - name: Verify Helm chart
        run: |
          helm lint helm/selenium-grid -f helm/selenium-grid/Values.yaml

      # Install Helm chart
      - name: Install Helm chart
        run: |
          helm upgrade --install selenium-grid ${{ env.HELM_CHART_DIR }} \
            -f ${{ env.HELM_CHART_DIR }}/Values.yaml
            --set hub.image.repository=$REPO \
            --set hub.image.tag=$TAG_SEL_HUB \
            --set chromeNode.image.repository=$REPO \
            --set chromeNode.image.tag=$TAG_CHROME_NODE \
            --set automation.image.repository=$REPO \
            --set automation.image.tag=$TAG_TEST